{"version":3,"sources":["Choice.tsx","Verbs.tsx","Question.tsx","Answer.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["Selection","verbs","filter","verb","level","Question","props","Container","Card","CardContent","Typography","variant","color","readings","reading","Choice","FormControl","component","RadioGroup","row","onChange","event","target","value","onSelect","Transitive","Intransitive","NotSelected","FormControlLabel","label","checked","currentSelection","control","Radio","Answer","transitive","meanings","map","meaning","primary","examples","example","ja","en","pickVerb","rnd","Math","floor","random","length","selection","App","useState","state","setState","Button","onClick","startIcon","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bb059ea1.chunk.js","sourcesContent":["import {\n  Container,\n  FormControl,\n  FormControlLabel,\n  Radio,\n  RadioGroup,\n} from \"@material-ui/core\";\n\nexport enum Selection {\n  NotSelected,\n  Transitive,\n  Intransitive,\n}\ninterface Props {\n  currentSelection: Selection;\n  onSelect: (selection: Selection) => void;\n}\n\nexport const Choice = (props: Props) => {\n  const handleChange = (event: React.ChangeEvent<any>) => {\n    if (event.target.value === \"transitive\") {\n      props.onSelect(Selection.Transitive);\n    } else if (event.target.value === \"intransitive\") {\n      props.onSelect(Selection.Intransitive);\n    } else {\n      props.onSelect(Selection.NotSelected);\n    }\n  };\n\n  return (\n    <Container>\n      <FormControl component=\"fieldset\">\n        <RadioGroup row onChange={handleChange}>\n          <FormControlLabel\n            value=\"transitive\"\n            label=\"Transitive\"\n            checked={props.currentSelection === Selection.Transitive}\n            control={<Radio />}\n          />\n          <FormControlLabel\n            value=\"intransitive\"\n            label=\"Intransitive\"\n            checked={props.currentSelection === Selection.Intransitive}\n            control={<Radio />}\n          />\n        </RadioGroup>\n      </FormControl>\n    </Container>\n  );\n};\n","import _verbs from './verbs.json';\n\ninterface Example {\n  en: string;\n  ja: string;\n};\n\ninterface Meaning {\n  meaning: string;\n  primary: boolean;\n  accepted_answer: boolean;\n};\n\ninterface Reading {\n  reading: string;\n  primary: boolean;\n  accepted_answer: boolean;\n};\n\nexport interface VerbDefinition {\n  verb: string;\n  url: string;\n  level: number;\n  transitive: boolean;\n  types: [string];\n  examples: [Example];\n  meanings: [Meaning];\n  readings: [Reading];\n};\n\n// Before implementing a real filter according to the user's need, I add here a crutch to filter my level.\nexport const verbs = (_verbs as [VerbDefinition]).filter(verb => verb.level < 18);\n","import Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport { Container } from '@material-ui/core';\nimport { VerbDefinition } from './Verbs';\n\nexport interface Props {\n  verb: VerbDefinition;\n}\n\nexport const Question = (props: Props) => {\n  return (\n    <Container>\n      <Card>\n        <CardContent>\n          <Typography variant=\"h2\">\n            {props.verb.verb}\n          </Typography>\n          <Typography variant=\"h4\" color=\"textSecondary\">\n            {props.verb.readings[0].reading}\n          </Typography>\n        </CardContent>\n      </Card>\n    </Container>\n  );\n};\n","import { Card, CardContent, Container, Typography } from \"@material-ui/core\";\nimport { VerbDefinition } from \"./Verbs\";\n\ninterface Props {\n  verb: VerbDefinition;\n}\n\nexport const Answer = (props: Props) => {\n  return (\n    <Container>\n      <Card>\n        <CardContent>\n          <Typography variant=\"h3\">\n            {props.verb.transitive ? \"Transitive\" : \"Intransitive\"}\n          </Typography>\n        </CardContent>\n        <CardContent>\n          {props.verb.meanings.map((meaning) => (\n            <Typography variant=\"h4\" color={ meaning.primary ? \"textPrimary\" : \"textSecondary\"}>\n              {meaning.meaning}\n            </Typography>\n          ))}\n        </CardContent>\n        {props.verb.examples.map((example) => (\n          <CardContent>\n            <Typography variant=\"h5\" color=\"textSecondary\">\n              {example.ja}\n            </Typography>\n            <Typography variant=\"h5\" color=\"textSecondary\">\n              {example.en}\n            </Typography>\n          </CardContent>\n        ))}\n      </Card>\n    </Container>\n  );\n};\n","import { useState } from \"react\";\nimport { verbs, VerbDefinition } from './Verbs';\nimport { Question } from \"./Question\";\nimport { Choice, Selection } from \"./Choice\";\nimport { Answer } from \"./Answer\";\nimport { Container, Button } from \"@material-ui/core\";\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\n\ninterface State {\n  verb: VerbDefinition;\n  selection: Selection;\n}\n\nconst pickVerb = () : State => {\n  const rnd = Math.floor(Math.random() * verbs.length)\n  return { verb: verbs[rnd], selection: Selection.NotSelected };\n}\n\nconst App = () => {\n  const [state, setState] = useState(pickVerb());\n\n  const onSelect = (selection: Selection) => {\n    setState({ verb: state.verb, selection: selection });\n  }\n\n  const onContinue = () => {\n    setState(pickVerb());\n  }\n\n  return (\n    <>\n      <Question verb={state.verb}/>\n      <Choice currentSelection={state.selection} onSelect={onSelect}/>\n      { state.selection !== Selection.NotSelected && \n        <Answer verb={state.verb}/>\n      }\n      <Container>\n        <Button variant=\"contained\" onClick={onContinue} startIcon={<NavigateNextIcon />}>Continue</Button>\n      </Container>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}