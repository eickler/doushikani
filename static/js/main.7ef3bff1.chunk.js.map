{"version":3,"sources":["Choice.tsx","Verbs.tsx","Question.tsx","Answer.tsx","Setup.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["Selection","verbs","Question","props","Container","Card","CardContent","Typography","variant","verb","color","readings","reading","Choice","FormControl","component","RadioGroup","row","onChange","event","target","value","onSelect","Transitive","Intransitive","NotSelected","FormControlLabel","label","checked","currentSelection","control","Radio","Answer","transitive","meanings","map","meaning","primary","examples","example","ja","en","Setup","React","useState","defaultLevel","setValue","autoComplete","TextField","type","level","onConfigUpdate","onKeyPress","ev","key","preventDefault","pickVerb","Math","floor","random","length","initialize","verbsToPractice","filter","selection","App","state","setState","config","Button","onClick","startIcon","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7ef3bff1.chunk.js","sourcesContent":["import Container from \"@material-ui/core/Container\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\n\nexport enum Selection {\n  NotSelected,\n  Transitive,\n  Intransitive,\n}\ninterface Props {\n  currentSelection: Selection;\n  onSelect: (selection: Selection) => void;\n}\n\nexport const Choice = (props: Props) => {\n  const handleChange = (event: React.ChangeEvent<any>) => {\n    if (event.target.value === \"transitive\") {\n      props.onSelect(Selection.Transitive);\n    } else if (event.target.value === \"intransitive\") {\n      props.onSelect(Selection.Intransitive);\n    } else {\n      props.onSelect(Selection.NotSelected);\n    }\n  };\n\n  return (\n    <Container>\n      <FormControl component=\"fieldset\">\n        <RadioGroup row onChange={handleChange}>\n          <FormControlLabel\n            value=\"transitive\"\n            label=\"Transitive\"\n            checked={props.currentSelection === Selection.Transitive}\n            control={<Radio />}\n          />\n          <FormControlLabel\n            value=\"intransitive\"\n            label=\"Intransitive\"\n            checked={props.currentSelection === Selection.Intransitive}\n            control={<Radio />}\n          />\n        </RadioGroup>\n      </FormControl>\n    </Container>\n  );\n};\n","import _verbs from './verbs.json';\n\ninterface Example {\n  en: string;\n  ja: string;\n};\n\ninterface Meaning {\n  meaning: string;\n  primary: boolean;\n  accepted_answer: boolean;\n};\n\ninterface Reading {\n  reading: string;\n  primary: boolean;\n  accepted_answer: boolean;\n};\n\nexport interface VerbDefinition {\n  verb: string;\n  url: string;\n  level: number;\n  transitive: boolean;\n  types: [string];\n  examples: [Example];\n  meanings: [Meaning];\n  readings: [Reading];\n};\n\nexport const verbs = _verbs as [VerbDefinition];\n","import Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport { Container } from '@material-ui/core';\nimport { VerbDefinition } from './Verbs';\n\nexport interface Props {\n  verb: VerbDefinition;\n}\n\nexport const Question = (props: Props) => {\n  return (\n    <Container>\n      <Card>\n        <CardContent>\n          <Typography variant=\"h2\">\n            {props.verb.verb}\n          </Typography>\n          <Typography variant=\"h4\" color=\"textSecondary\">\n            {props.verb.readings[0].reading}\n          </Typography>\n        </CardContent>\n      </Card>\n    </Container>\n  );\n};\n","import Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Container from \"@material-ui/core/Container\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { VerbDefinition } from \"./Verbs\";\n\ninterface Props {\n  verb: VerbDefinition;\n}\n\nexport const Answer = (props: Props) => {\n  return (\n    <Container>\n      <Card>\n        <CardContent>\n          <Typography variant=\"h3\">\n            {props.verb.transitive ? \"Transitive\" : \"Intransitive\"}\n          </Typography>\n        </CardContent>\n        <CardContent>\n          {props.verb.meanings.map((meaning) => (\n            <Typography key={meaning.meaning} variant=\"h4\" color={ meaning.primary ? \"textPrimary\" : \"textSecondary\"}>\n              {meaning.meaning}\n            </Typography>\n          ))}\n        </CardContent>\n        {props.verb.examples.map((example) => (\n          <CardContent key={example.en}>\n            <Typography variant=\"h5\" color=\"textSecondary\">\n              {example.ja}\n            </Typography>\n            <Typography variant=\"h5\" color=\"textSecondary\">\n              {example.en}\n            </Typography>\n          </CardContent>\n        ))}\n      </Card>\n    </Container>\n  );\n};\n","import React from \"react\";\nimport Container from \"@material-ui/core/Container\";\nimport TextField from \"@material-ui/core/TextField\";\n\nexport interface Configuration {\n  level: number;\n}\n\ninterface Props {\n  defaultLevel: number;\n  onConfigUpdate: (config: Configuration) => void;\n}\n\nexport const Setup = (props: Props) => {\n  const [value, setValue] = React.useState<\n    number | string | Array<number | string>\n  >(props.defaultLevel);\n\n  const onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const level = +event.target.value;\n    if (level && level >= 1 && level <= 60) {\n      setValue(level);\n      props.onConfigUpdate({ level: level });\n    }\n  };\n\n  const ignoreCR = (ev: React.KeyboardEvent) => {\n    if (ev.key === \"Enter\") {\n      ev.preventDefault();\n    }\n  }\n\n  return (\n    <Container>\n      <form autoComplete=\"off\">\n        <TextField\n          label=\"Max. Wanikani level\"\n          variant=\"outlined\"\n          type=\"number\"\n          value={value}\n          onChange={onChange}\n          onKeyPress={ignoreCR}\n        />\n      </form>\n    </Container>\n  );\n};\n","import { useState } from \"react\";\nimport Container from \"@material-ui/core/Container\";\nimport Button from \"@material-ui/core/Button\";\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\nimport { verbs, VerbDefinition } from './Verbs';\nimport { Question } from \"./Question\";\nimport { Choice, Selection } from \"./Choice\";\nimport { Answer } from \"./Answer\";\nimport { Configuration, Setup } from \"./Setup\";\n\ninterface State {\n  verbsToPractice: VerbDefinition[];\n  verb: VerbDefinition;\n  selection: Selection;\n}\n\nconst pickVerb = (verbs: VerbDefinition[]) : VerbDefinition => {\n  const rnd = Math.floor(Math.random() * verbs.length);\n  return verbs[rnd];\n}\n\nconst initialize = (level: number) : State => {\n  const verbsToPractice = verbs.filter( verb => verb.level <= level);\n  return {\n    verbsToPractice: verbsToPractice,\n    verb: pickVerb(verbsToPractice),\n    selection: Selection.NotSelected,\n  } \n}\n\nconst App = () => {\n  const [state, setState] = useState(initialize(18));\n\n  const onSelect = (selection: Selection) => {\n    setState({ ...state, selection: selection });\n  }\n\n  const onContinue = () => {\n    setState({ ...state, verb: pickVerb(state.verbsToPractice) });\n  }\n\n  const onConfigUpdate = (config: Configuration) => {\n    setState(initialize(config.level));\n  }\n\n  return (\n    <>\n      <Setup defaultLevel={18} onConfigUpdate={onConfigUpdate}/>\n      <Question verb={state.verb}/>\n      <Choice currentSelection={state.selection} onSelect={onSelect}/>\n      { state.selection !== Selection.NotSelected && \n        <Answer verb={state.verb}/>\n      }\n      <Container>\n        <Button variant=\"contained\" onClick={onContinue} startIcon={<NavigateNextIcon />}>Continue</Button>\n      </Container>\n    </>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}