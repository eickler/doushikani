{"version":3,"sources":["Choice.tsx","Question.tsx","Answer.tsx","Setup.tsx","Control.ts","Flashcards.ts","App.tsx","reportWebVitals.js","index.tsx"],"names":["Selection","Question","props","Container","Card","CardContent","Typography","variant","verb","color","readings","reading","Choice","FormControl","component","RadioGroup","row","onChange","event","target","value","onSelect","Transitive","Intransitive","NotSelected","FormControlLabel","label","checked","currentSelection","control","Radio","disabled","Answer","transitive","meanings","map","meaning","primary","examples","example","ja","en","Setup","React","useState","level","defaultLevel","verbsPerDay","defaultVerbsPerDay","toDefaultConfiguration","config","setConfig","update","newConfig","onConfigUpdate","ignoreCR","ev","key","preventDefault","autoComplete","TextField","type","onKeyPress","verbs","_verbs","DONE","url","types","accepted_answer","Control","flashcards","amount","cards","this","freshCardsToGet","cardsToRepeat","freshCards","dueCards","Object","entries","dueCard","card","values","available","add","candidateVerbs","keys","length","rnd","Math","floor","random","MARKER","defaultItem","interval","repetition","efactor","Flashcards","storage","_get","getItem","JSON","parse","_getAll","indexOf","substring","setItem","stringify","dueDate","Date","now","item","_set","result","updatedItem","supermemo","updatedCard","reinitialize","window","localStorage","pick","selection","App","state","setState","onContinue","Button","onClick","startIcon","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.92c8a262.chunk.js","sourcesContent":["import Container from \"@material-ui/core/Container\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\n\nexport enum Selection {\n  NotSelected,\n  Transitive,\n  Intransitive,\n}\ninterface Props {\n  currentSelection: Selection;\n  onSelect: (selection: Selection) => void;\n}\n\nexport const Choice = (props: Props) => {\n  const handleChange = (event: React.ChangeEvent<any>) => {\n    if (event.target.value === \"transitive\") {\n      props.onSelect(Selection.Transitive);\n    } else if (event.target.value === \"intransitive\") {\n      props.onSelect(Selection.Intransitive);\n    } else {\n      props.onSelect(Selection.NotSelected);\n    }\n  };\n\n  return (\n    <Container>\n      <FormControl component=\"fieldset\">\n        <RadioGroup row onChange={handleChange}>\n          <FormControlLabel\n            value=\"transitive\"\n            label=\"Transitive\"\n            checked={props.currentSelection === Selection.Transitive}\n            control={<Radio disabled={props.currentSelection !== Selection.NotSelected} />}\n          />\n          <FormControlLabel\n            value=\"intransitive\"\n            label=\"Intransitive\"\n            checked={props.currentSelection === Selection.Intransitive}\n            control={<Radio disabled={props.currentSelection !== Selection.NotSelected}/>}\n          />\n        </RadioGroup>\n      </FormControl>\n    </Container>\n  );\n};\n","import Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport { Container } from '@material-ui/core';\nimport { VerbDefinition } from './Verbs';\n\nexport interface Props {\n  verb: VerbDefinition;\n}\n\nexport const Question = (props: Props) => {\n  return (\n    <Container>\n      <Card>\n        <CardContent>\n          <Typography variant=\"h2\">\n            {props.verb.verb}\n          </Typography>\n          <Typography variant=\"h4\" color=\"textSecondary\">\n            {props.verb.readings[0].reading}\n          </Typography>\n        </CardContent>\n      </Card>\n    </Container>\n  );\n};\n","import Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Container from \"@material-ui/core/Container\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { VerbDefinition } from \"./Verbs\";\n\ninterface Props {\n  verb: VerbDefinition;\n}\n\nexport const Answer = (props: Props) => {\n  return (\n    <Container>\n      <Card>\n        <CardContent>\n          <Typography variant=\"h3\">\n            {props.verb.transitive ? \"Transitive\" : \"Intransitive\"}\n          </Typography>\n        </CardContent>\n        <CardContent>\n          {props.verb.meanings.map((meaning) => (\n            <Typography key={meaning.meaning} variant=\"h4\" color={ meaning.primary ? \"textPrimary\" : \"textSecondary\"}>\n              {meaning.meaning}\n            </Typography>\n          ))}\n        </CardContent>\n        {props.verb.examples.map((example) => (\n          <CardContent key={example.en}>\n            <Typography variant=\"h5\" color=\"textSecondary\">\n              {example.ja}\n            </Typography>\n            <Typography variant=\"h5\" color=\"textSecondary\">\n              {example.en}\n            </Typography>\n          </CardContent>\n        ))}\n      </Card>\n    </Container>\n  );\n};\n","import React from \"react\";\nimport Container from \"@material-ui/core/Container\";\nimport TextField from \"@material-ui/core/TextField\";\n\nexport interface Configuration {\n  level: number;\n  verbsPerDay: number;\n}\n\ninterface Props {\n  defaultLevel: number;\n  defaultVerbsPerDay: number;\n  onConfigUpdate: (config: Configuration) => void;\n}\n\nconst toDefaultConfiguration = (props: Props) => {\n  return { level: props.defaultLevel, verbsPerDay: props.defaultVerbsPerDay }\n}\n\nexport const Setup = (props: Props) => {\n  const [config, setConfig] = React.useState<Configuration>(toDefaultConfiguration(props));\n\n  const update = (newConfig: Configuration) => {\n    setConfig(newConfig);\n    props.onConfigUpdate(newConfig);\n  }\n\n  const onChangeLevel = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const level = +event.target.value;\n    if (level && level >= 1 && level <= 60) {\n      update({ ...config, level: level });\n    }\n  };\n\n  const onChangeVerbsPerDay = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const verbsPerDay = +event.target.value;\n    if (verbsPerDay && verbsPerDay >= 0) {\n      update({ ...config, verbsPerDay: verbsPerDay });\n    }\n  };\n\n  const ignoreCR = (ev: React.KeyboardEvent) => {\n    if (ev.key === \"Enter\") {\n      ev.preventDefault();\n    }\n  }\n\n  return (\n    <Container>\n      <form autoComplete=\"off\">\n        <TextField\n          label=\"Max. Wanikani level\"\n          variant=\"outlined\"\n          type=\"number\"\n          value={config.level}\n          onChange={onChangeLevel}\n          onKeyPress={ignoreCR}\n        />\n        <TextField\n          label=\"Min. verbs per day\"\n          variant=\"outlined\"\n          type=\"number\"\n          value={config.verbsPerDay}\n          onChange={onChangeVerbsPerDay}\n          onKeyPress={ignoreCR}\n        />\n      </form>\n    </Container>\n  );\n};\n","import { Flashcard, Flashcards } from \"./Flashcards\";\nimport { VerbDefinition } from \"./Verbs\";\nimport _verbs from \"./verbs.json\";\n\nconst verbs = (() => {\n  const verbs: Record<string, VerbDefinition> = {};\n  for (const verb of _verbs as [VerbDefinition]) {\n    verbs[verb.verb] = verb;\n  }\n  return verbs;\n})();\n\ninterface VerbCard {\n  verb: VerbDefinition;\n  card: Flashcard;\n}\n\nexport const DONE: VerbDefinition = {\n  verb: \"You are done for the day!\",\n  url: \"https://i.giphy.com/media/RiWZUGcZPEKdQgrQ96/giphy.webp\",\n  level: 0,\n  transitive: false,\n  types: [\"\"],\n  examples: [{ en: \"\", ja: \"\" }],\n  meanings: [{ meaning: \"\", primary: true, accepted_answer: true }],\n  readings: [\n    { reading: \"Come back tomorrow.\", primary: true, accepted_answer: true },\n  ],\n};\n\nexport class Control {\n  flashcards: Flashcards;\n  cards: Record<string, VerbCard> = {};\n\n  constructor(flashcards: Flashcards, level: number, amount: number) {\n    this.flashcards = flashcards;\n    const freshCardsToGet = this.cardsToRepeat(amount);\n    // Pull fresh cards only once a day!!\n    this.freshCards(level, freshCardsToGet);\n  }\n\n  private cardsToRepeat(amount: number): number {\n    const dueCards = this.flashcards.dueCards();\n    for (const [verb, dueCard] of Object.entries(dueCards)) {\n      if (amount-- === 0) {\n        break;\n      }\n      this.cards[verb] = { verb: verbs[verb], card: dueCard };\n    }\n    return amount;\n  }\n\n  private freshCards(level: number, amount: number): void {\n    for (const verb of Object.values(verbs)) {\n      if (verb.level <= level && this.flashcards.available(verb.verb)) {\n        if (amount-- === 0) {\n          break;\n        }\n        const card = this.flashcards.add(verb.verb);\n        this.cards[verb.verb] = { verb: verb, card: card };\n      }\n    }\n  }\n\n  pick(): VerbDefinition {\n    const candidateVerbs = Object.keys(this.cards);\n    if (candidateVerbs.length) {\n      const rnd = Math.floor(Math.random() * candidateVerbs.length);\n      const pickedVerb = this.cards[candidateVerbs[rnd]].verb;\n      return pickedVerb;\n    }\n    return DONE;\n  }\n\n  result(verb: string, transitive: boolean): void {\n    this.flashcards.update(\n      verb,\n      this.cards[verb].card,\n      transitive === verbs[verb].transitive\n    );\n    delete this.cards[verb];\n  }\n}\n","import { supermemo, SuperMemoItem } from \"supermemo\";\n\nconst MARKER = '動詞 ';\nconst DAY = 24*60*60*1000;\n\nexport interface Flashcard {\n  item: SuperMemoItem;\n  dueDate: number;\n}\n\nconst defaultItem : SuperMemoItem = {\n  interval: 0,\n  repetition: 0,\n  efactor: 2.5,\n};\n\nconst nextDate = (interval: number) : number => {\n  return Date.now() + interval * DAY;\n}\n\nexport class Flashcards {\n  storage: Storage;\n\n  constructor(storage: Storage) {\n    this.storage = storage;\n  }\n\n  _set(verb: string, card: Flashcard) {\n    this.storage.setItem(MARKER + verb, JSON.stringify(card));\n  }\n  \n  _get = (verb: string) : Flashcard => {\n    const value = this.storage.getItem(MARKER + verb);\n    return value ? JSON.parse(value) : null;\n  }\n  \n  _getAll = () : Record<string,Flashcard> => {\n    const cards : Record<string,Flashcard> = {};\n    for (const [key, value] of Object.entries(this.storage)) {\n      if (key.indexOf(MARKER) === 0) {\n        cards[key.substring(MARKER.length)] = JSON.parse(value);\n      }\n    }\n    return cards;\n  }  \n\n  available(verb: string) : boolean {\n    return this._get(verb) === null;\n  }\n\n  dueCards() : Record<string,Flashcard> {\n    const cards : Record<string,Flashcard> = {};\n    for (const [key, card] of Object.entries(this._getAll())) {\n      if (card.dueDate <= Date.now()) {\n        cards[key] = card;\n      }\n    }\n    return cards;\n  }\n\n  add(verb: string) : Flashcard {\n    const card = { item: defaultItem, dueDate: Date.now() };\n    this._set(verb, card);\n    return card;\n  }\n\n  update(verb: string, card: Flashcard, result: boolean) : void {\n    const updatedItem = supermemo(card.item, result ? 5 : 0);\n    const updatedCard = {\n      item: updatedItem,\n      dueDate: nextDate(updatedItem.interval),\n    };\n    this._set(verb, updatedCard);\n  }\n}\n","import { useState } from \"react\";\nimport Container from \"@material-ui/core/Container\";\nimport Button from \"@material-ui/core/Button\";\nimport NavigateNextIcon from \"@material-ui/icons/NavigateNext\";\nimport { VerbDefinition } from \"./Verbs\";\nimport { Question } from \"./Question\";\nimport { Choice, Selection } from \"./Choice\";\nimport { Answer } from \"./Answer\";\nimport { Configuration, Setup } from \"./Setup\";\nimport { Control, DONE } from \"./Control\";\nimport { Flashcards } from \"./Flashcards\";\n\nconst defaultLevel = 18;\nconst defaultAmount = 10;\n\ninterface State {\n  control: Control;\n  verb: VerbDefinition;\n  selection: Selection;\n}\n\nconst reinitialize = (level: number, amount: number): State => {\n  const flashcards = new Flashcards(window.localStorage);\n  const control = new Control(flashcards, level, amount);\n  return {\n    control: control,\n    verb: control.pick(),\n    selection: Selection.NotSelected,\n  };\n};\n\nconst App = () => {\n  const [state, setState] = useState(() =>\n    reinitialize(defaultLevel, defaultAmount)\n  );\n\n  const onSelect = (selection: Selection) => {\n    setState({ ...state, selection: selection });\n    state.control.result(state.verb.verb, selection === Selection.Transitive);\n  };\n\n  const onContinue = () => {\n    setState({\n      ...state,\n      verb: state.control.pick(),\n      selection: Selection.NotSelected,\n    });\n  };\n\n  const onConfigUpdate = (config: Configuration) => {\n    setState(reinitialize(config.level, config.verbsPerDay));\n  };\n\n  function showSelection() {\n    return (\n      <>\n        <Choice currentSelection={state.selection} onSelect={onSelect} />\n        {state.selection !== Selection.NotSelected && (\n          <Answer verb={state.verb} />\n        )}\n        <Container>\n          <Button\n            variant=\"contained\"\n            onClick={onContinue}\n            startIcon={<NavigateNextIcon />}\n          >\n            Continue\n          </Button>\n        </Container>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <Setup\n        defaultLevel={defaultLevel}\n        defaultVerbsPerDay={defaultAmount}\n        onConfigUpdate={onConfigUpdate}\n      />\n      <Question verb={state.verb} />\n      {state.verb !== DONE && showSelection()}\n    </>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}